import telebot
import pandas as pd
from typing import Dict, List
from telebot import types
from datetime import datetime, timedelta
import random
import time
import traceback
import numpy
import schedule
import threading
from typing import Dict, List

from config import TOKEN, ADMIN_IDS, POLL_TIME, FACT_TIME
from database import Database
from facts import SLEEP_TIPS, SLEEP_FACTS
from questions import SURVEY_QUESTIONS


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = telebot.TeleBot(TOKEN)
db = Database('sleep_bot.db')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ–ø—Ä–æ—Å–æ–≤
user_states = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(user_id: int) -> types.ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
    if user_id in ADMIN_IDS:
        keyboard.add('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
    return keyboard

def get_lifestyle_keyboard() -> types.ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(
        types.KeyboardButton('–ê–∫—Ç–∏–≤–Ω—ã–π (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –ø–æ–¥–≤–∏–∂–Ω–∞—è —Ä–∞–±–æ—Ç–∞)'),
        types.KeyboardButton('–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π (—Ä–µ–¥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞)'),
        types.KeyboardButton('–°–∏–¥—è—á–∏–π (–Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞)')
    )
    return keyboard

def get_gender_keyboard() -> types.ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton('–ú—É–∂—Å–∫–æ–π'),
        types.KeyboardButton('–ñ–µ–Ω—Å–∫–∏–π'),
        types.KeyboardButton('–î—Ä—É–≥–æ–π')
    )
    return keyboard

def get_admin_keyboard() -> types.ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç/—Ñ–∞–∫—Ç',
        '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º',
        '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫',
        '–ù–∞–∑–∞–¥'
    )
    return keyboard

def get_feedback_keyboard() -> types.InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–∑—ã–≤–∞ –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton('üëç –ü–æ–º–æ–≥–ª–æ', callback_data='feedback_yes'),
        types.InlineKeyboardButton('üëé –ù–µ –ø–æ–º–æ–≥–ª–æ', callback_data='feedback_no')
    )
    return keyboard

def get_test_run_keyboard() -> types.ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç',
        '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å',
        '–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
        '–ù–∞–∑–∞–¥'
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def handle_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = db.get_user(user_id)
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        bot.send_message(
            user_id, 
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username}! üòä\n–Ø –°–û–ù–Ø - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞.",
            reply_markup=get_main_keyboard(user_id)
        )
        db.update_user_activity(user_id)
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        bot.send_message(
            user_id, 
            f"–ü—Ä–∏–≤–µ—Ç, {username}! üòä\n–Ø –°–û–ù–Ø - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç.\n\n"
            "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–í–≤–µ–¥–∏ —á–∏—Å–ª–æ)"
        )
        user_states[user_id] = {'state': 'registration', 'step': 'age'}

@bot.message_handler(commands=['help'])
def handle_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "–Ø –°–û–ù–Ø - –±–æ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–Ω–∞\n"
        "üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ —Ñ–∞–∫—Ç—ã –æ —Å–Ω–µ\n"
        "üìà –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ –º–Ω–æ–π!"
    )
    bot.send_message(message.from_user.id, help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
def handle_back(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        bot.send_message(
            user_id, 
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", 
            reply_markup=get_main_keyboard(user_id)
        )
    else:
        bot.send_message(
            user_id, 
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", 
            reply_markup=get_main_keyboard(user_id)
        )

@bot.message_handler(func=lambda message: message.text == '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def handle_stats(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ /start")
        return
    
    stats = db.get_user_stats(user_id)
    
    if not stats or 'sleep_stats' not in stats:
        bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø—Ä–æ—Å–æ–≤.")
        return
    
    sleep_stats = stats['sleep_stats']
    last_week = stats.get('last_week', [])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–Ω–∞:\n\n"
        f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: {sleep_stats['avg_sleep_duration']} —á–∞—Å–æ–≤\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: {sleep_stats['avg_sleep_quality']}/10\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–π: {sleep_stats['avg_awakenings']}\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤: {sleep_stats['total_surveys']}\n\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
    )
    
    for day in last_week:
        stats_text += f"{day['date']}: {day['duration']} —á, –∫–∞—á–µ—Å—Ç–≤–æ {day['quality']}/10\n"
    
    bot.send_message(user_id, stats_text)

@bot.message_handler(func=lambda message: message.text == '–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
def handle_achievements(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ /start")
        return
    
    achievements = db.get_user_achievements(user_id)
    
    if not achievements:
        bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!")
        return
    
    achievements_text = "üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"
    for ach in achievements:
        achievements_text += f"{ach['type']} - {ach['date']}\n"
    
    bot.send_message(user_id, achievements_text)

@bot.message_handler(func=lambda message: message.text == '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' and message.from_user.id in ADMIN_IDS)
def handle_admin_panel(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'"""
    user_id = message.from_user.id
    bot.send_message(
        user_id, 
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", 
        reply_markup=get_admin_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' and message.from_user.id in ADMIN_IDS)
def handle_user_count(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'"""
    user_id = message.from_user.id
    count = db.get_user_count()
    bot.send_message(user_id, f"–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")

@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç/—Ñ–∞–∫—Ç' and message.from_user.id in ADMIN_IDS)
def handle_add_fact(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç/—Ñ–∞–∫—Ç'"""
    user_id = message.from_user.id
    msg = bot.send_message(
        user_id, 
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–≤–µ—Ç–∞ –∏–ª–∏ —Ñ–∞–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.\n\n"
        "–í –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø:\n"
        "–°–û–í–ï–¢: –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–Ω–∞\n"
        "–§–ê–ö–¢: –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ —Å–Ω–µ"
    )
    bot.register_next_step_handler(msg, process_fact_type)

def process_fact_type(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∏–ø–∞ —Ñ–∞–∫—Ç–∞/—Å–æ–≤–µ—Ç–∞"""
    user_id = message.from_user.id
    text = message.text
    
    if text.startswith('–°–û–í–ï–¢:'):
        fact_text = text.replace('–°–û–í–ï–¢:', '').strip()
        if db.add_fact(fact_text, "tip"):
            bot.send_message(user_id, "–°–æ–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_admin_keyboard())
        else:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞.", reply_markup=get_admin_keyboard())
    elif text.startswith('–§–ê–ö–¢:'):
        fact_text = text.replace('–§–ê–ö–¢:', '').strip()
        if db.add_fact(fact_text, "fact"):
            bot.send_message(user_id, "–§–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_admin_keyboard())
        else:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞.", reply_markup=get_admin_keyboard())
    else:
        msg = bot.send_message(
            user_id, 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø (–°–û–í–ï–¢: –∏–ª–∏ –§–ê–ö–¢:) –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        bot.register_next_step_handler(msg, process_fact_type)

@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º' and message.from_user.id in ADMIN_IDS)
def handle_send_to_all(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º'"""
    user_id = message.from_user.id
    msg = bot.send_message(
        user_id, 
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
    )
    bot.register_next_step_handler(msg, process_message_to_all)

def process_message_to_all(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    text = message.text
    
    users = db.get_all_users()
    success = 0
    failures = 0
    
    bot.send_message(user_id, f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    for user in users:
        try:
            bot.send_message(user, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}")
            success += 1
            time.sleep(0.1)  # –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
        except Exception as e:
            failures += 1
    
    bot.send_message(
        user_id, 
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failures}",
        reply_markup=get_admin_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫' and message.from_user.id in ADMIN_IDS)
def handle_test_run(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫'"""
    user_id = message.from_user.id
    bot.send_message(
        user_id, 
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:",
        reply_markup=get_test_run_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç' and message.from_user.id in ADMIN_IDS)
def handle_send_test_tip(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç'"""
    user_id = message.from_user.id
    send_daily_fact(user_id, test_mode=True)
    bot.send_message(
        user_id, 
        "–¢–µ—Å—Ç–æ–≤—ã–π —Å–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
        reply_markup=get_admin_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å' and message.from_user.id in ADMIN_IDS)
def handle_send_test_survey(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å'"""
    user_id = message.from_user.id
    send_daily_survey(user_id, test_mode=True)
    bot.send_message(
        user_id, 
        "–¢–µ—Å—Ç–æ–≤—ã–π –æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
        reply_markup=get_admin_keyboard()
    )

def create_test_data(user_id: int):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    today = datetime.now()
    for i in range(7):  # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 7 –¥–Ω–µ–π
        date = (today - timedelta(days=i)).strftime('%Y-%m-%d')
        db.save_survey(
            user_id=user_id,
            bedtime=f"{random.randint(22, 23)}:{random.randint(0, 59):02d}",
            wakeup_time=f"{random.randint(6, 8)}:{random.randint(0, 59):02d}",
            sleep_duration=random.uniform(5.5, 9.0),
            awakenings=random.randint(0, 3),
            sleep_quality=random.randint(4, 9),
            mood_morning=random.randint(4, 10),
            stress_level=random.randint(3, 8),
            exercise=random.randint(10, 60),
            caffeine=random.randint(0, 3),
            alcohol=random.randint(0, 2),
            screen_time=random.randint(30, 120),
            notes="–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
        )

@bot.message_handler(func=lambda message: message.text == '–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' and message.from_user.id in ADMIN_IDS)
def handle_test_analysis(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'"""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        data = db.get_survey_data_for_analysis(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        if data is None or (hasattr(data, 'empty') and data.empty):
            bot.send_message(user_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            create_test_data(user_id)
            data = db.get_survey_data_for_analysis(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö
        if len(data) < 7:
            bot.send_message(user_id, "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 7 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö. –°–æ–∑–¥–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            days_needed = 7 - len(data)
            for _ in range(days_needed):
                create_test_data(user_id)
            data = db.get_survey_data_for_analysis(user_id)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        df = pd.DataFrame(data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        required_columns = ['sleep_duration', 'sleep_quality']
        for col in required_columns:
            if col not in df.columns:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–∞–Ω–Ω—ã—Ö: {col}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.get_user(user_id)
        if not user:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        
        # 1. –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        avg_sleep = df['sleep_duration'].mean()
        avg_quality = df['sleep_quality'].mean()
        
        recommendations.append(f"üîç –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ (–Ω–∞ –æ—Å–Ω–æ–≤–µ {len(data)} –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö):")
        recommendations.append(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: {avg_sleep:.1f} —á–∞—Å–æ–≤")
        recommendations.append(f"–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: {avg_quality:.1f}/10")
        
        # 2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        ideal_sleep = calculate_ideal_sleep(user['age'])
        if avg_sleep < ideal_sleep - 1:
            recommendations.append(f"‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –Ω–∞ {ideal_sleep - avg_sleep:.1f} —á–∞—Å–æ–≤")
        elif avg_sleep > ideal_sleep + 1:
            recommendations.append(f"‚ö†Ô∏è –í—ã —Å–ø–∏—Ç–µ –±–æ–ª—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π –Ω–æ—Ä–º—ã ({ideal_sleep} —á–∞—Å–æ–≤)")
        else:
            recommendations.append("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –≤ –Ω–æ—Ä–º–µ")
        
        # 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        if avg_quality < 6:
            recommendations.append("‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –Ω–∏–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            recommendations.append("- –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É")
            recommendations.append("- –ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤ —Å–ø–∞–ª—å–Ω–µ")
            recommendations.append("- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ—Ñ–µ–∏–Ω–∞ –∏ —ç–∫—Ä–∞–Ω–æ–≤ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º")
        else:
            recommendations.append("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ —Ö–æ—Ä–æ—à–µ–µ")
        
        # 4. –ü—Ä–æ—Å—Ç—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        test_tips = [
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∫–ª—é—á–∞—Ç—å –≥–∞–¥–∂–µ—Ç—ã –∑–∞ 1 —á–∞—Å –¥–æ —Å–Ω–∞",
            "üí° –¢–µ–ø–ª—ã–π –¥—É—à –ø–µ—Ä–µ–¥ —Å–Ω–æ–º –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∑–∞—Å—ã–ø–∞–Ω–∏–µ",
            "üí° –ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–ø–∞–ª—å–Ω—é –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–µ–¥–∏—Ç–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
            "üí° –ò–∑–±–µ–≥–∞–π—Ç–µ —Ç—è–∂–µ–ª–æ–π –ø–∏—â–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º"
        ]
        recommendations.append(random.choice(test_tips))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        bot.send_message(user_id, "\n".join(recommendations))
        bot.send_message(
            user_id, 
            "–¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!",
            reply_markup=get_admin_keyboard()
        )
    
    except Exception as e:
        error_msg = f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}"
        print(error_msg)
        traceback.print_exc()
        bot.send_message(user_id, error_msg)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'registration' and 
                                      user_states.get(message.from_user.id, {}).get('step') == 'age')
def handle_age(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    try:
        age = int(message.text)
        if age < 1 or age > 120:
            raise ValueError
        
        user_states[user_id]['age'] = age
        user_states[user_id]['step'] = 'gender'
        
        bot.send_message(
            user_id, 
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=get_gender_keyboard()
        )
    except ValueError:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 120).")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'registration' and 
                                      user_states.get(message.from_user.id, {}).get('step') == 'gender')
def handle_gender(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    gender = message.text
    
    if gender not in ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π', '–î—Ä—É–≥–æ–π']:
        bot.send_message(
            user_id, 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=get_gender_keyboard()
        )
        return
    
    user_states[user_id]['gender'] = gender
    user_states[user_id]['step'] = 'lifestyle'
    
    bot.send_message(
        user_id, 
        "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏:",
        reply_markup=get_lifestyle_keyboard()
    )

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'registration' and 
                                      user_states.get(message.from_user.id, {}).get('step') == 'lifestyle')
def handle_lifestyle(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    lifestyle = message.text
    
    if lifestyle not in [
        '–ê–∫—Ç–∏–≤–Ω—ã–π (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –ø–æ–¥–≤–∏–∂–Ω–∞—è —Ä–∞–±–æ—Ç–∞)',
        '–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π (—Ä–µ–¥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞)',
        '–°–∏–¥—è—á–∏–π (–Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞)'
    ]:
        bot.send_message(
            user_id, 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.",
            reply_markup=get_lifestyle_keyboard()
        )
        return
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    username = message.from_user.first_name
    age = user_states[user_id]['age']
    gender = user_states[user_id]['gender']
    
    if db.register_user(user_id, username, age, gender, lifestyle):
        bot.send_message(
            user_id, 
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {username}! üéâ\n\n"
            "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞.\n\n"
            "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å –æ —Ç–≤–æ–µ–º —Å–Ω–µ, "
            "–∞ –≤–µ—á–µ—Ä–æ–º - –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ —Å–Ω–µ.\n\n"
            "–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é —è –±—É–¥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!\n\n"
            "–¢—ã –º–æ–∂–µ—à—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.",
            reply_markup=get_main_keyboard(user_id)
        )
    else:
        bot.send_message(
            user_id, 
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    del user_states[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø—Ä–æ—Å–∞
def send_daily_survey(user_id: int, test_mode: bool = False):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å"""
    user = db.get_user(user_id)
    if not user:
        return
    
    if not test_mode:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–ø—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().strftime('%Y-%m-%d')
        with db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM surveys WHERE user_id = ? AND date = ?', (user_id, today))
            if cursor.fetchone()[0] > 0:
                return  # –£–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª –æ–ø—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è
    
    # –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
    user_states[user_id] = {
        'state': 'survey',
        'step': 0,
        'answers': {}
    }
    
    first_question = SURVEY_QUESTIONS[0]
    ask_question(user_id, first_question)

def ask_question(user_id: int, question: Dict):
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–∑ –æ–ø—Ä–æ—Å–∞"""
    if question['type'] == 'time':
        msg = bot.send_message(
            user_id, 
            question['text'] + "\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:30)"
        )
    elif question['type'] == 'int' and question['options']:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
        keyboard.add(*[str(opt) for opt in question['options']])
        msg = bot.send_message(
            user_id, 
            question['text'],
            reply_markup=keyboard
        )
    else:
        msg = bot.send_message(
            user_id, 
            question['text'],
            reply_markup=types.ReplyKeyboardRemove()
        )
    
    bot.register_next_step_handler(msg, process_answer, question)

def process_answer(message: types.Message, question: Dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    user_id = message.from_user.id
    
    if user_id not in user_states or user_states[user_id]['state'] != 'survey':
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if question['type'] == 'time':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
            time_str = message.text
            datetime.strptime(time_str, '%H:%M')
            answer = time_str
        elif question['type'] == 'int':
            answer = int(message.text)
            if question['options'] and answer not in question['options']:
                raise ValueError
        elif question['type'] == 'float':
            answer = float(message.text.replace(',', '.'))
        else:  # text
            answer = message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        user_states[user_id]['answers'][question['key']] = answer
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
        next_step = user_states[user_id]['step'] + 1
        if next_step < len(SURVEY_QUESTIONS):
            user_states[user_id]['step'] = next_step
            ask_question(user_id, SURVEY_QUESTIONS[next_step])
        else:
            complete_survey(user_id)
    except ValueError:
        # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
        if question['type'] == 'time':
            error_msg = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:30)"
        elif question['type'] in ['int', 'float']:
            error_msg = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"
            if question['options']:
                error_msg += f" –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {', '.join(map(str, question['options']))}"
        else:
            error_msg = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"
        
        msg = bot.send_message(user_id, error_msg)
        bot.register_next_step_handler(msg, process_answer, question)

def complete_survey(user_id: int):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    answers = user_states[user_id]['answers']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.save_survey(
        user_id=user_id,
        bedtime=answers.get('bedtime', ''),
        wakeup_time=answers.get('wakeup_time', ''),
        sleep_duration=answers.get('sleep_duration', 0),
        awakenings=answers.get('awakenings', 0),
        sleep_quality=answers.get('sleep_quality', 0),
        mood_morning=answers.get('mood_morning', 0),
        stress_level=answers.get('stress_level', 0),
        exercise=answers.get('exercise', 0),
        caffeine=answers.get('caffeine', 0),
        alcohol=answers.get('alcohol', 0),
        screen_time=answers.get('screen_time', 0),
        notes=answers.get('notes', '')
    )
    
    del user_states[user_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
    bot.send_message(
        user_id, 
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞! üí§\n\n"
        "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥—É—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Ç–≤–æ–π —Å–æ–Ω –∏ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
        "–í–µ—á–µ—Ä–æ–º —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ —Å–Ω–µ!",
        reply_markup=get_main_keyboard(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–≤–µ—Ç–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤
def send_daily_fact(user_id: int, test_mode: bool = False):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–æ–≤–µ—Ç –∏–ª–∏ —Ñ–∞–∫—Ç"""
    user = db.get_user(user_id)
    if not user:
        return
    
    if not test_mode:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().strftime('%Y-%m-%d')
        with db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
            SELECT COUNT(*) FROM recommendations 
            WHERE user_id = ? AND date = ? AND recommendation_text LIKE '–°–æ–≤–µ—Ç:%' OR recommendation_text LIKE '–§–∞–∫—Ç:%'
            ''', (user_id, today))
            if cursor.fetchone()[0] > 0:
                return  # –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –∏–ª–∏ —Ñ–∞–∫—Ç
    if random.random() < 0.7:  # 70% chance for a tip
        fact = random.choice(SLEEP_TIPS)
        fact_type = "–°–æ–≤–µ—Ç"
    else:
        fact = random.choice(SLEEP_FACTS)
        fact_type = "–§–∞–∫—Ç"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    db.save_recommendation(user_id, f"{fact_type}: {fact}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if fact_type == "–°–æ–≤–µ—Ç":
        emoji = "üí°"
        header = "–°–æ–≤–µ—Ç –¥–Ω—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞:"
    else:
        emoji = "üåô"
        header = "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ —Å–Ω–µ:"
    
    bot.send_message(
        user_id, 
        f"{emoji} {header}\n\n{fact}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
def analyze_and_recommend(user_id: int, test_mode: bool = False):
    """–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    user = db.get_user(user_id)
    if not user:
        return
    
    if not test_mode:
        last_week = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        with db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
            SELECT COUNT(*) FROM recommendations 
            WHERE user_id = ? AND date >= ? AND recommendation_text NOT LIKE '–°–æ–≤–µ—Ç:%' AND recommendation_text NOT LIKE '–§–∞–∫—Ç:%'
            ''', (user_id, last_week))
            if cursor.fetchone()[0] > 0:
                return
    
    data = db.get_survey_data_for_analysis(user_id)
    
    if len(data) < 7:  # –ú–∏–Ω–∏–º—É–º –Ω–µ–¥–µ–ª—è –¥–∞–Ω–Ω—ã—Ö
        if not test_mode:
            bot.send_message(
                user_id, 
                "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–≤–æ–µ–º —Å–Ω–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –æ–ø—Ä–æ—Å—ã –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π."
            )
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    data = preprocess_data(data)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    recommendations = analyze_basic_metrics(data, user)
    
    # –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    corr_recommendations = advanced_correlation_analysis(data, user)
    recommendations.extend(corr_recommendations)
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
    time_series_recommendations = analyze_time_series(data, user)
    recommendations.extend(time_series_recommendations)
    
    # –ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–Ω–µ–π
    cluster_recommendations = cluster_analysis(data, user)
    recommendations.extend(cluster_recommendations)
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
    profile_recommendations = generate_profile_based_recommendations(user)
    recommendations.extend(profile_recommendations)
    
    if not recommendations:
        recommendations = [
            "–ü–æ–∫–∞ —É –º–µ–Ω—è –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞–ø–æ–ª–Ω—è—Ç—å –æ–ø—Ä–æ—Å—ã!"
        ]
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    unique_recommendations = list(dict.fromkeys(recommendations))
    
    # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if test_mode:
        for rec in unique_recommendations[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –ª—É—á—à–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            bot.send_message(
                user_id, 
                f"üåø –¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n\n{rec}"
            )
    else:
        for rec in unique_recommendations[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –ª—É—á—à–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            db.save_recommendation(user_id, rec)
            bot.send_message(
                user_id, 
                f"üåø –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n\n{rec}"
            )
    
    if not test_mode and unique_recommendations:
        time.sleep(2)
        bot.send_message(
            user_id, 
            "–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é —è —Å–ø—Ä–æ—à—É, –ø–æ–º–æ–≥–ª–∏ –ª–∏ —Ç–µ–±–µ –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. "
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å —É–∂–µ —Å–µ–π—á–∞—Å –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å!",
            reply_markup=get_main_keyboard(user_id)
        )

def preprocess_data(data: pd.DataFrame) -> pd.DataFrame:
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç (—á–∞—Å—ã —Å –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —á–∞—Å—Ç—å—é)
    data['bedtime_num'] = data['bedtime'].apply(
        lambda x: float(x.split(':')[0]) + float(x.split(':')[1])/60 if pd.notnull(x) else None
    )
    
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥—ä–µ–º–∞
    data['wakeup_num'] = data['wakeup_time'].apply(
        lambda x: float(x.split(':')[0]) + float(x.split(':')[1])/60 if pd.notnull(x) else None
    )
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å —Å–Ω–∞
    data['sleep_regularity'] = data['bedtime_num'].rolling(window=3).std().fillna(0)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    data['sleep_efficiency'] = data['sleep_duration'] / (data['wakeup_num'] - data['bedtime_num'] + 24*(data['wakeup_num'] < data['bedtime_num']))
    data['weekday'] = pd.to_datetime(data['date']).dt.dayofweek
    data['is_weekend'] = data['weekday'].isin([5, 6]).astype(int)
    
    return data

def analyze_basic_metrics(data: pd.DataFrame, user: Dict) -> List[str]:
    """–ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å–Ω–∞"""
    recommendations = []
    
    # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    avg_sleep = data['sleep_duration'].mean()
    avg_quality = data['sleep_quality'].mean()
    avg_awakenings = data['awakenings'].mean()
    avg_efficiency = data['sleep_efficiency'].mean()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    age = user['age']
    ideal_sleep = calculate_ideal_sleep(age)
    
    if avg_sleep < ideal_sleep - 1:
        recommendations.append(
            f"–î–ª—è —Ç–≤–æ–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ ({age} –ª–µ—Ç) —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ {ideal_sleep}-{ideal_sleep+1} —á–∞—Å–æ–≤. "
            f"–¢—ã —Å–ø–∏—à—å –≤ —Å—Ä–µ–¥–Ω–µ–º {avg_sleep:.1f} —á–∞—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –Ω–∞ {ideal_sleep - avg_sleep:.1f} —á–∞—Å–æ–≤."
        )
    elif avg_sleep > ideal_sleep + 1:
        recommendations.append(
            f"–¢—ã —Å–ø–∏—à—å –±–æ–ª—å—à–µ ({avg_sleep:.1f} —á–∞—Å–æ–≤) —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π –¥–ª—è —Ç–≤–æ–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ ({age} –ª–µ—Ç) –Ω–æ—Ä–º—ã ({ideal_sleep} —á–∞—Å–æ–≤). "
            "–ò–∑–±—ã—Ç–æ–∫ —Å–Ω–∞ –º–æ–∂–µ—Ç —Å–Ω–∏–∂–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è —Å–Ω–∞ –Ω–∞ 30 –º–∏–Ω—É—Ç."
        )
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    if avg_quality < 6:
        recommendations.append(
            f"–¢–≤–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ ({avg_quality:.1f}/10) –Ω–∏–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ. "
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –≥–∏–≥–∏–µ–Ω—ã —Å–Ω–∞: —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É, "
            "–∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤ —Å–ø–∞–ª—å–Ω–µ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ—Ñ–µ–∏–Ω–∞ –∏ —ç–∫—Ä–∞–Ω–æ–≤ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º."
        )
    
    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∞
    if avg_efficiency < 0.85:
        recommendations.append(
            f"–¢–≤–æ—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∞ ({avg_efficiency:.1%}) –Ω–∏–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π (85%+). "
            "–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç—ã –ø—Ä–æ–≤–æ–¥–∏—à—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø–æ—Å—Ç–µ–ª–∏ –±–µ–∑ —Å–Ω–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π –ª–æ–∂–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å —Å–ø–∞—Ç—å."
        )
    
    return recommendations

def calculate_ideal_sleep(age: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"""
    if age < 18: return 9
    elif 18 <= age < 25: return 8
    elif 25 <= age < 45: return 7.5
    elif 45 <= age < 65: return 7
    else: return 7.5  # –ü–æ–∂–∏–ª—ã–º —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —Å–Ω–∞

def advanced_correlation_analysis(data: pd.DataFrame, user: Dict) -> List[str]:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    recommendations = []
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º —Å–Ω–∞
    numeric_cols = [
        'stress_level', 'exercise', 'caffeine', 'alcohol', 
        'screen_time', 'bedtime_num', 'awakenings', 'mood_morning'
    ]
    
    try:
        corr_matrix = data[numeric_cols + ['sleep_quality']].corr()
        sleep_quality_corr = corr_matrix['sleep_quality'].drop('sleep_quality').abs().sort_values(ascending=False)
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø-3 —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        for factor in sleep_quality_corr.index[:3]:
            corr_value = corr_matrix.loc['sleep_quality', factor]
            abs_corr = abs(corr_value)
            
            if abs_corr > 0.4:  # –ó–Ω–∞—á–∏–º–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
                if factor == 'stress_level' and corr_value < -0.4:
                    recommendations.append(
                        "–í—ã—è–≤–ª–µ–Ω–∞ —Å–∏–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å –º–µ–∂–¥—É —É—Ä–æ–≤–Ω–µ–º —Å—Ç—Ä–µ—Å—Å–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–æ–º —Å–Ω–∞ (r={:.2f}). ".format(corr_value) +
                        "–¢–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º –º–æ–≥—É—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ç–≤–æ–π —Å–æ–Ω:\n"
                        "- –í–µ—á–µ—Ä–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è –∏–ª–∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
                        "- –í–µ–¥–µ–Ω–∏–µ '—Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–≤–æ–≥' –ø–µ—Ä–µ–¥ —Å–Ω–æ–º\n"
                        "- –¢–µ–ø–ª—ã–π –¥—É—à –∏–ª–∏ –≤–∞–Ω–Ω–∞ –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞"
                    )
                
                elif factor == 'exercise' and corr_value > 0.4:
                    rec = "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ–π —Å–æ–Ω (r={:.2f}). ".format(corr_value)
                    if data['exercise'].mean() < 30:
                        rec += "–¢—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –≤ —Å—Ä–µ–¥–Ω–µ–º –≤—Å–µ–≥–æ {:.1f} –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å. ".format(data['exercise'].mean())
                        rec += "–ü–æ–ø—Ä–æ–±—É–π —É–≤–µ–ª–∏—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ 30-40 –º–∏–Ω—É—Ç, –æ—Å–æ–±–µ–Ω–Ω–æ –∞—ç—Ä–æ–±–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è."
                    else:
                        rec += "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, –Ω–æ –∏–∑–±–µ–≥–∞–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞."
                    recommendations.append(rec)
                
                elif factor == 'screen_time' and corr_value < -0.3:
                    avg_screen_time = data['screen_time'].mean()
                    recommendations.append(
                        "–í—Ä–µ–º—è –ø–µ—Ä–µ–¥ —ç–∫—Ä–∞–Ω–∞–º–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–≤–æ–µ–≥–æ —Å–Ω–∞ (r={:.2f}). ".format(corr_value) +
                        f"–¢—ã –ø—Ä–æ–≤–æ–¥–∏—à—å –≤ —Å—Ä–µ–¥–Ω–µ–º {avg_screen_time:.1f} –º–∏–Ω—É—Ç —Å –≥–∞–¥–∂–µ—Ç–∞–º–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º. –ü–æ–ø—Ä–æ–±—É–π:\n"
                        "- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å '–Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º' –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö\n"
                        "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–µ —Å–∏–Ω–∏–π —Å–≤–µ—Ç\n"
                        "- –ß–∏—Ç–∞—Ç—å –±—É–º–∞–∂–Ω—ã–µ –∫–Ω–∏–≥–∏ –≤–º–µ—Å—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö"
                    )
                
                elif factor == 'bedtime_num' and abs_corr > 0.3:
                    if corr_value > 0:  # –ü–æ–∑–¥–Ω–∏–π –æ—Ç—Ö–æ–¥ –∫–æ —Å–Ω—É = —Ö—É–∂–µ –∫–∞—á–µ—Å—Ç–≤–æ
                        avg_bedtime = data['bedtime_num'].mean()
                        ideal_bedtime = 22.5 if user['age'] >= 18 else 21.5
                        if avg_bedtime > ideal_bedtime:
                            recommendations.append(
                                "–ë–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–π –æ—Ç—Ö–æ–¥ –∫–æ —Å–Ω—É —Å–≤—è–∑–∞–Ω —Å —É—Ö—É–¥—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–≤–æ–µ–≥–æ —Å–Ω–∞ (r={:.2f}). ".format(corr_value) +
                                f"–¢—ã –æ–±—ã—á–Ω–æ –ª–æ–∂–∏—à—å—Å—è –≤ {int(avg_bedtime)}:{int((avg_bedtime%1)*60):02d}. " +
                                f"–ü–æ–ø—Ä–æ–±—É–π –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Å–º–µ—â–∞—Ç—å –≤—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É –∫ {int(ideal_bedtime)}:{int((ideal_bedtime%1)*60):02d}."
                            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    return recommendations

def analyze_time_series(data: pd.DataFrame, user: Dict) -> List[str]:
    """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    recommendations = []
    
    try:
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –±—É–¥–Ω–∏/–≤—ã—Ö–æ–¥–Ω—ã–µ
        weekend_data = data[data['is_weekend'] == 1]
        weekday_data = data[data['is_weekend'] == 0]
        
        if len(weekend_data) > 2 and len(weekday_data) > 5:
            weekend_sleep = weekend_data['sleep_duration'].mean()
            weekday_sleep = weekday_data['sleep_duration'].mean()
            
            if abs(weekend_sleep - weekday_sleep) > 1.5:
                recommendations.append(
                    "–Ø –∑–∞–º–µ—Ç–∏–ª –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–≤–æ–µ–≥–æ —Å–Ω–∞ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ ({:.1f} —á) ".format(weekend_sleep) +
                    "–∏ –±—É–¥–Ω–∏ ({:.1f} —á). ".format(weekday_sleep) +
                    "–¢–∞–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å '—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –¥–∂–µ—Ç–ª–∞–≥'. " +
                    "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –¥–æ 1 —á–∞—Å–∞, –≤—Å—Ç–∞–≤–∞—è –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1 —á–∞—Å –ø–æ–∑–∂–µ."
                )
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞
        data['date_dt'] = pd.to_datetime(data['date'])
        data.set_index('date_dt', inplace=True)
        weekly_avg = data['sleep_quality'].resample('W').mean()
        
        if len(weekly_avg) > 2:
            trend = (weekly_avg.iloc[-1] - weekly_avg.iloc[0]) / len(weekly_avg)
            
            if trend < -0.3:
                recommendations.append(
                    "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ —è –∑–∞–º–µ—Ç–∏–ª —É—Ö—É–¥—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–≤–æ–µ–≥–æ —Å–Ω–∞. " +
                    "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º —Å—Ç—Ä–µ—Å—Å–æ–º, –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞ –¥–Ω—è –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏. " +
                    "–î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è?"
                )
            elif trend > 0.3:
                recommendations.append(
                    "–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ö–∞—á–µ—Å—Ç–≤–æ —Ç–≤–æ–µ–≥–æ —Å–Ω–∞ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–ª—É—á—à–∞–µ—Ç—Å—è. " +
                    "–ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤—ã—Ä–∞–±–æ—Ç–∞–ª."
                )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤: {e}")
    
    return recommendations

def cluster_analysis(data: pd.DataFrame, user: Dict) -> List[str]:
    """–ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–Ω–µ–π –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º —Å–Ω–∞"""
    recommendations = []
    
    try:
        from sklearn.cluster import KMeans
        from sklearn.preprocessing import StandardScaler
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        cluster_data = data[['sleep_duration', 'sleep_quality', 'awakenings', 'stress_level']].dropna()
        if len(cluster_data) < 10:
            return recommendations
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        scaler = StandardScaler()
        scaled_data = scaler.fit_transform(cluster_data)
        
        # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
        kmeans = KMeans(n_clusters=2, random_state=42)
        clusters = kmeans.fit_predict(scaled_data)
        cluster_data['cluster'] = clusters
        
        # –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        cluster_stats = cluster_data.groupby('cluster').mean()
        
        # –ù–∞—Ö–æ–¥–∏–º "—Ö–æ—Ä–æ—à–∏–π" –∏ "–ø–ª–æ—Ö–æ–π" –∫–ª–∞—Å—Ç–µ—Ä—ã
        good_cluster = cluster_stats['sleep_quality'].idxmax()
        bad_cluster_stats = cluster_stats.loc[1 - good_cluster]
        good_cluster_stats = cluster_stats.loc[good_cluster]
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã
        significant_diffs = []
        for col in ['stress_level', 'awakenings']:
            diff = bad_cluster_stats[col] - good_cluster_stats[col]
            if diff > 0.5 * good_cluster_stats[col]:  # –ó–Ω–∞—á–∏–º–∞—è —Ä–∞–∑–Ω–∏—Ü–∞
                significant_diffs.append((col, diff))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if significant_diffs:
            rec = "–ê–Ω–∞–ª–∏–∑ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã—è–≤–∏–ª –¥–≤–∞ —Ç–∏–ø–∞ –Ω–æ—á–µ–π: —Å —Ö–æ—Ä–æ—à–∏–º –∏ –ø–ª–æ—Ö–∏–º —Å–Ω–æ–º. "
            rec += "–í '–ø–ª–æ—Ö–∏–µ' –Ω–æ—á–∏ –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è:\n"
            
            for col, diff in significant_diffs:
                if col == 'stress_level':
                    rec += f"- –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ (+{diff:.1f} –±–∞–ª–ª–∞)\n"
                elif col == 'awakenings':
                    rec += f"- –ë–æ–ª—å—à–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–π (+{diff:.1f} —Ä–∞–∑–∞)\n"
            
            rec += "\n–ü–æ–ø—Ä–æ–±—É–π –≤ –¥–Ω–∏ —Å –≤—ã—Å–æ–∫–∏–º —Å—Ç—Ä–µ—Å—Å–æ–º:\n"
            rec += "- –¢–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º\n"
            rec += "- –¢–µ–ø–ª—ã–π —Ä–æ–º–∞—à–∫–æ–≤—ã–π —á–∞–π\n"
            rec += "- –ë–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–π –æ—Ç—Ö–æ–¥ –∫–æ —Å–Ω—É"
            
            recommendations.append(rec)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    return recommendations

def generate_profile_based_recommendations(user: Dict) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    recommendations = []
    age = user['age']
    gender = user['gender']
    lifestyle = user['lifestyle']
    
    # –ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    if age >= 45:
        recommendations.append(
            "–í —Ç–≤–æ–µ–º –≤–æ–∑—Ä–∞—Å—Ç–µ –º–µ–ª–∞—Ç–æ–Ω–∏–Ω (–≥–æ—Ä–º–æ–Ω —Å–Ω–∞) –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–µ–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ. "
            "–ü–æ–ø—Ä–æ–±—É–π:\n"
            "- –£–≤–µ–ª–∏—á–∏—Ç—å –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞ –¥–Ω–µ–º\n"
            "- –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–∫–∏ –º–µ–ª–∞—Ç–æ–Ω–∏–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –≤—Ä–∞—á–æ–º\n"
            "- –°–æ–±–ª—é–¥–∞—Ç—å —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º —Å–Ω–∞"
        )
    
    # –ü–æ –ø–æ–ª—É
    if gender == '–ñ–µ–Ω—Å–∫–∏–π':
        recommendations.append(
            "–ñ–µ–Ω—â–∏–Ω—ã —á–∞—Å—Ç–æ –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ü–∏—Ä–∫–∞–¥–Ω—ã—Ö —Ä–∏—Ç–º–æ–≤. "
            "–ü–æ–ø—Ä–æ–±—É–π:\n"
            "- –°—Ç–∞–±–∏–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞ –¥–∞–∂–µ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ\n"
            "- –¢–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏ –ü–ú–°\n"
            "- –ë–æ–ª–µ–µ —Ç–µ–º–Ω—É—é –∏ –ø—Ä–æ—Ö–ª–∞–¥–Ω—É—é —Å–ø–∞–ª—å–Ω—é"
        )
    
    # –ü–æ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏
    if '—Å–∏–¥—è—á–∏–π' in lifestyle.lower():
        recommendations.append(
            "–¢–≤–æ–π —Å–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞. "
            "–î–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å:\n"
            "- 10-–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ—Å–ª–µ —É–∂–∏–Ω–∞\n"
            "- –†–∞—Å—Ç—è–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º\n"
            "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–æ—è—á–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"
        )
    elif '–∞–∫—Ç–∏–≤–Ω—ã–π' in lifestyle.lower():
        recommendations.append(
            "–•–æ—Ç—è —Ç—ã –≤–µ–¥–µ—à—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ:\n"
            "- –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ 3+ —á–∞—Å–∞ –¥–æ —Å–Ω–∞ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å –∑–∞—Å—ã–ø–∞–Ω–∏—é\n"
            "- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ (–π–æ–≥–∞, —Ä–∞—Å—Ç—è–∂–∫–∞) –≤–µ—á–µ—Ä–æ–º\n"
            "- –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –º–∞–≥–Ω–∏—è –∏ –±–µ–ª–∫–∞"
        )
    
    return recommendations

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('feedback_'))
def handle_feedback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–∞ –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    user_id = call.from_user.id
    recommendation = db.get_last_recommendation(user_id)
    
    if not recommendation:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –æ—Ç–∑—ã–≤–∞.")
        return
    
    is_helpful = call.data.endswith('_yes')
    db.update_recommendation_feedback(recommendation['id'], is_helpful)
    
    if is_helpful:
        bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –†–∞–¥, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –±—ã–ª–∞ –ø–æ–ª–µ–∑–Ω–æ–π. üòä")
    else:
        bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤! –£—á—Ç—É —ç—Ç–æ –≤ –±—É–¥—É—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö.")
    
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )

# –§—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def schedule_checker():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

def send_morning_surveys():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–ø—Ä–æ—Å—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    users = db.get_all_users()
    for user_id in users:
        try:
            user = db.get_user(user_id)
            if user:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä–µ–º—è –∏–ª–∏ –≤ 8 —É—Ç—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                notification_time = user.get('notification_time', POLL_TIME)
                current_time = datetime.now().strftime('%H:%M')
                if current_time == notification_time:
                    send_daily_survey(user_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def send_evening_facts():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—á–µ—Ä–Ω–∏–µ —Å–æ–≤–µ—Ç—ã/—Ñ–∞–∫—Ç—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    users = db.get_all_users()
    for user_id in users:
        try:
            send_daily_fact(user_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def weekly_analysis():
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    users = db.get_all_users()
    for user_id in users:
        try:
            analyze_and_recommend(user_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def ask_feedback():
    """–°–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö"""
    week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
    users_with_recommendations = set()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
    with db._get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('''
        SELECT DISTINCT user_id FROM recommendations 
        WHERE date = ? AND recommendation_text NOT LIKE '–°–æ–≤–µ—Ç:%' AND recommendation_text NOT LIKE '–§–∞–∫—Ç:%'
        ''', (week_ago,))
        users_with_recommendations.update(row[0] for row in cursor.fetchall())
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–∑—ã–≤
    for user_id in users_with_recommendations:
        try:
            recommendation = db.get_last_recommendation(user_id)
            if recommendation:
                bot.send_message(
                    user_id,
                    f"–ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥ —è –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ —ç—Ç—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:\n\n{recommendation['text']}\n\n"
                    "–ü–æ–º–æ–≥–ª–∞ –ª–∏ –æ–Ω–∞ —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å —Å–æ–Ω?",
                    reply_markup=get_feedback_keyboard()
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–∑—ã–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
schedule.every().day.at(POLL_TIME).do(send_morning_surveys)
schedule.every().day.at(FACT_TIME).do(send_evening_facts)
schedule.every().sunday.at("12:00").do(weekly_analysis)
schedule.every().sunday.at("18:00").do(ask_feedback)

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=schedule_checker, daemon=True).start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –°–û–ù–Ø –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()